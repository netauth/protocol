// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NetAuth2Client is the client API for NetAuth2 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NetAuth2Client interface {
	EntityCreate(ctx context.Context, in *EntityRequest, opts ...grpc.CallOption) (*Empty, error)
	EntityUpdate(ctx context.Context, in *EntityRequest, opts ...grpc.CallOption) (*Empty, error)
	EntityInfo(ctx context.Context, in *EntityRequest, opts ...grpc.CallOption) (*ListOfEntities, error)
	EntitySearch(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*ListOfEntities, error)
	EntityUM(ctx context.Context, in *KVRequest, opts ...grpc.CallOption) (*ListOfStrings, error)
	EntityKVAdd(ctx context.Context, in *KV2Request, opts ...grpc.CallOption) (*Empty, error)
	EntityKVGet(ctx context.Context, in *KV2Request, opts ...grpc.CallOption) (*ListOfKVData, error)
	EntityKVDel(ctx context.Context, in *KV2Request, opts ...grpc.CallOption) (*Empty, error)
	EntityKVReplace(ctx context.Context, in *KV2Request, opts ...grpc.CallOption) (*Empty, error)
	EntityKeys(ctx context.Context, in *KVRequest, opts ...grpc.CallOption) (*ListOfStrings, error)
	EntityDestroy(ctx context.Context, in *EntityRequest, opts ...grpc.CallOption) (*Empty, error)
	EntityLock(ctx context.Context, in *EntityRequest, opts ...grpc.CallOption) (*Empty, error)
	EntityUnlock(ctx context.Context, in *EntityRequest, opts ...grpc.CallOption) (*Empty, error)
	EntityGroups(ctx context.Context, in *EntityRequest, opts ...grpc.CallOption) (*ListOfGroups, error)
	AuthEntity(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*Empty, error)
	AuthGetToken(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResult, error)
	AuthValidateToken(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*Empty, error)
	AuthChangeSecret(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*Empty, error)
	GroupCreate(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*Empty, error)
	GroupUpdate(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*Empty, error)
	GroupInfo(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*ListOfGroups, error)
	GroupUM(ctx context.Context, in *KVRequest, opts ...grpc.CallOption) (*ListOfStrings, error)
	GroupKVAdd(ctx context.Context, in *KV2Request, opts ...grpc.CallOption) (*Empty, error)
	GroupKVGet(ctx context.Context, in *KV2Request, opts ...grpc.CallOption) (*ListOfKVData, error)
	GroupKVDel(ctx context.Context, in *KV2Request, opts ...grpc.CallOption) (*Empty, error)
	GroupKVReplace(ctx context.Context, in *KV2Request, opts ...grpc.CallOption) (*Empty, error)
	GroupUpdateRules(ctx context.Context, in *GroupRulesRequest, opts ...grpc.CallOption) (*Empty, error)
	GroupAddMember(ctx context.Context, in *EntityRequest, opts ...grpc.CallOption) (*Empty, error)
	GroupDelMember(ctx context.Context, in *EntityRequest, opts ...grpc.CallOption) (*Empty, error)
	GroupDestroy(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*Empty, error)
	GroupMembers(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*ListOfEntities, error)
	GroupSearch(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*ListOfGroups, error)
	SystemCapabilities(ctx context.Context, in *CapabilityRequest, opts ...grpc.CallOption) (*Empty, error)
	SystemPing(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	SystemStatus(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ServerStatus, error)
}

type netAuth2Client struct {
	cc grpc.ClientConnInterface
}

func NewNetAuth2Client(cc grpc.ClientConnInterface) NetAuth2Client {
	return &netAuth2Client{cc}
}

func (c *netAuth2Client) EntityCreate(ctx context.Context, in *EntityRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/netauth.v2.NetAuth2/EntityCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAuth2Client) EntityUpdate(ctx context.Context, in *EntityRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/netauth.v2.NetAuth2/EntityUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAuth2Client) EntityInfo(ctx context.Context, in *EntityRequest, opts ...grpc.CallOption) (*ListOfEntities, error) {
	out := new(ListOfEntities)
	err := c.cc.Invoke(ctx, "/netauth.v2.NetAuth2/EntityInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAuth2Client) EntitySearch(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*ListOfEntities, error) {
	out := new(ListOfEntities)
	err := c.cc.Invoke(ctx, "/netauth.v2.NetAuth2/EntitySearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAuth2Client) EntityUM(ctx context.Context, in *KVRequest, opts ...grpc.CallOption) (*ListOfStrings, error) {
	out := new(ListOfStrings)
	err := c.cc.Invoke(ctx, "/netauth.v2.NetAuth2/EntityUM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAuth2Client) EntityKVAdd(ctx context.Context, in *KV2Request, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/netauth.v2.NetAuth2/EntityKVAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAuth2Client) EntityKVGet(ctx context.Context, in *KV2Request, opts ...grpc.CallOption) (*ListOfKVData, error) {
	out := new(ListOfKVData)
	err := c.cc.Invoke(ctx, "/netauth.v2.NetAuth2/EntityKVGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAuth2Client) EntityKVDel(ctx context.Context, in *KV2Request, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/netauth.v2.NetAuth2/EntityKVDel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAuth2Client) EntityKVReplace(ctx context.Context, in *KV2Request, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/netauth.v2.NetAuth2/EntityKVReplace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAuth2Client) EntityKeys(ctx context.Context, in *KVRequest, opts ...grpc.CallOption) (*ListOfStrings, error) {
	out := new(ListOfStrings)
	err := c.cc.Invoke(ctx, "/netauth.v2.NetAuth2/EntityKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAuth2Client) EntityDestroy(ctx context.Context, in *EntityRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/netauth.v2.NetAuth2/EntityDestroy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAuth2Client) EntityLock(ctx context.Context, in *EntityRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/netauth.v2.NetAuth2/EntityLock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAuth2Client) EntityUnlock(ctx context.Context, in *EntityRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/netauth.v2.NetAuth2/EntityUnlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAuth2Client) EntityGroups(ctx context.Context, in *EntityRequest, opts ...grpc.CallOption) (*ListOfGroups, error) {
	out := new(ListOfGroups)
	err := c.cc.Invoke(ctx, "/netauth.v2.NetAuth2/EntityGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAuth2Client) AuthEntity(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/netauth.v2.NetAuth2/AuthEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAuth2Client) AuthGetToken(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResult, error) {
	out := new(AuthResult)
	err := c.cc.Invoke(ctx, "/netauth.v2.NetAuth2/AuthGetToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAuth2Client) AuthValidateToken(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/netauth.v2.NetAuth2/AuthValidateToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAuth2Client) AuthChangeSecret(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/netauth.v2.NetAuth2/AuthChangeSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAuth2Client) GroupCreate(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/netauth.v2.NetAuth2/GroupCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAuth2Client) GroupUpdate(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/netauth.v2.NetAuth2/GroupUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAuth2Client) GroupInfo(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*ListOfGroups, error) {
	out := new(ListOfGroups)
	err := c.cc.Invoke(ctx, "/netauth.v2.NetAuth2/GroupInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAuth2Client) GroupUM(ctx context.Context, in *KVRequest, opts ...grpc.CallOption) (*ListOfStrings, error) {
	out := new(ListOfStrings)
	err := c.cc.Invoke(ctx, "/netauth.v2.NetAuth2/GroupUM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAuth2Client) GroupKVAdd(ctx context.Context, in *KV2Request, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/netauth.v2.NetAuth2/GroupKVAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAuth2Client) GroupKVGet(ctx context.Context, in *KV2Request, opts ...grpc.CallOption) (*ListOfKVData, error) {
	out := new(ListOfKVData)
	err := c.cc.Invoke(ctx, "/netauth.v2.NetAuth2/GroupKVGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAuth2Client) GroupKVDel(ctx context.Context, in *KV2Request, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/netauth.v2.NetAuth2/GroupKVDel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAuth2Client) GroupKVReplace(ctx context.Context, in *KV2Request, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/netauth.v2.NetAuth2/GroupKVReplace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAuth2Client) GroupUpdateRules(ctx context.Context, in *GroupRulesRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/netauth.v2.NetAuth2/GroupUpdateRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAuth2Client) GroupAddMember(ctx context.Context, in *EntityRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/netauth.v2.NetAuth2/GroupAddMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAuth2Client) GroupDelMember(ctx context.Context, in *EntityRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/netauth.v2.NetAuth2/GroupDelMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAuth2Client) GroupDestroy(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/netauth.v2.NetAuth2/GroupDestroy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAuth2Client) GroupMembers(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*ListOfEntities, error) {
	out := new(ListOfEntities)
	err := c.cc.Invoke(ctx, "/netauth.v2.NetAuth2/GroupMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAuth2Client) GroupSearch(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*ListOfGroups, error) {
	out := new(ListOfGroups)
	err := c.cc.Invoke(ctx, "/netauth.v2.NetAuth2/GroupSearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAuth2Client) SystemCapabilities(ctx context.Context, in *CapabilityRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/netauth.v2.NetAuth2/SystemCapabilities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAuth2Client) SystemPing(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/netauth.v2.NetAuth2/SystemPing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAuth2Client) SystemStatus(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ServerStatus, error) {
	out := new(ServerStatus)
	err := c.cc.Invoke(ctx, "/netauth.v2.NetAuth2/SystemStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NetAuth2Server is the server API for NetAuth2 service.
// All implementations should embed UnimplementedNetAuth2Server
// for forward compatibility
type NetAuth2Server interface {
	EntityCreate(context.Context, *EntityRequest) (*Empty, error)
	EntityUpdate(context.Context, *EntityRequest) (*Empty, error)
	EntityInfo(context.Context, *EntityRequest) (*ListOfEntities, error)
	EntitySearch(context.Context, *SearchRequest) (*ListOfEntities, error)
	EntityUM(context.Context, *KVRequest) (*ListOfStrings, error)
	EntityKVAdd(context.Context, *KV2Request) (*Empty, error)
	EntityKVGet(context.Context, *KV2Request) (*ListOfKVData, error)
	EntityKVDel(context.Context, *KV2Request) (*Empty, error)
	EntityKVReplace(context.Context, *KV2Request) (*Empty, error)
	EntityKeys(context.Context, *KVRequest) (*ListOfStrings, error)
	EntityDestroy(context.Context, *EntityRequest) (*Empty, error)
	EntityLock(context.Context, *EntityRequest) (*Empty, error)
	EntityUnlock(context.Context, *EntityRequest) (*Empty, error)
	EntityGroups(context.Context, *EntityRequest) (*ListOfGroups, error)
	AuthEntity(context.Context, *AuthRequest) (*Empty, error)
	AuthGetToken(context.Context, *AuthRequest) (*AuthResult, error)
	AuthValidateToken(context.Context, *AuthRequest) (*Empty, error)
	AuthChangeSecret(context.Context, *AuthRequest) (*Empty, error)
	GroupCreate(context.Context, *GroupRequest) (*Empty, error)
	GroupUpdate(context.Context, *GroupRequest) (*Empty, error)
	GroupInfo(context.Context, *GroupRequest) (*ListOfGroups, error)
	GroupUM(context.Context, *KVRequest) (*ListOfStrings, error)
	GroupKVAdd(context.Context, *KV2Request) (*Empty, error)
	GroupKVGet(context.Context, *KV2Request) (*ListOfKVData, error)
	GroupKVDel(context.Context, *KV2Request) (*Empty, error)
	GroupKVReplace(context.Context, *KV2Request) (*Empty, error)
	GroupUpdateRules(context.Context, *GroupRulesRequest) (*Empty, error)
	GroupAddMember(context.Context, *EntityRequest) (*Empty, error)
	GroupDelMember(context.Context, *EntityRequest) (*Empty, error)
	GroupDestroy(context.Context, *GroupRequest) (*Empty, error)
	GroupMembers(context.Context, *GroupRequest) (*ListOfEntities, error)
	GroupSearch(context.Context, *SearchRequest) (*ListOfGroups, error)
	SystemCapabilities(context.Context, *CapabilityRequest) (*Empty, error)
	SystemPing(context.Context, *Empty) (*Empty, error)
	SystemStatus(context.Context, *Empty) (*ServerStatus, error)
}

// UnimplementedNetAuth2Server should be embedded to have forward compatible implementations.
type UnimplementedNetAuth2Server struct {
}

func (UnimplementedNetAuth2Server) EntityCreate(context.Context, *EntityRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EntityCreate not implemented")
}
func (UnimplementedNetAuth2Server) EntityUpdate(context.Context, *EntityRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EntityUpdate not implemented")
}
func (UnimplementedNetAuth2Server) EntityInfo(context.Context, *EntityRequest) (*ListOfEntities, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EntityInfo not implemented")
}
func (UnimplementedNetAuth2Server) EntitySearch(context.Context, *SearchRequest) (*ListOfEntities, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EntitySearch not implemented")
}
func (UnimplementedNetAuth2Server) EntityUM(context.Context, *KVRequest) (*ListOfStrings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EntityUM not implemented")
}
func (UnimplementedNetAuth2Server) EntityKVAdd(context.Context, *KV2Request) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EntityKVAdd not implemented")
}
func (UnimplementedNetAuth2Server) EntityKVGet(context.Context, *KV2Request) (*ListOfKVData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EntityKVGet not implemented")
}
func (UnimplementedNetAuth2Server) EntityKVDel(context.Context, *KV2Request) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EntityKVDel not implemented")
}
func (UnimplementedNetAuth2Server) EntityKVReplace(context.Context, *KV2Request) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EntityKVReplace not implemented")
}
func (UnimplementedNetAuth2Server) EntityKeys(context.Context, *KVRequest) (*ListOfStrings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EntityKeys not implemented")
}
func (UnimplementedNetAuth2Server) EntityDestroy(context.Context, *EntityRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EntityDestroy not implemented")
}
func (UnimplementedNetAuth2Server) EntityLock(context.Context, *EntityRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EntityLock not implemented")
}
func (UnimplementedNetAuth2Server) EntityUnlock(context.Context, *EntityRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EntityUnlock not implemented")
}
func (UnimplementedNetAuth2Server) EntityGroups(context.Context, *EntityRequest) (*ListOfGroups, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EntityGroups not implemented")
}
func (UnimplementedNetAuth2Server) AuthEntity(context.Context, *AuthRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthEntity not implemented")
}
func (UnimplementedNetAuth2Server) AuthGetToken(context.Context, *AuthRequest) (*AuthResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthGetToken not implemented")
}
func (UnimplementedNetAuth2Server) AuthValidateToken(context.Context, *AuthRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthValidateToken not implemented")
}
func (UnimplementedNetAuth2Server) AuthChangeSecret(context.Context, *AuthRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthChangeSecret not implemented")
}
func (UnimplementedNetAuth2Server) GroupCreate(context.Context, *GroupRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupCreate not implemented")
}
func (UnimplementedNetAuth2Server) GroupUpdate(context.Context, *GroupRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupUpdate not implemented")
}
func (UnimplementedNetAuth2Server) GroupInfo(context.Context, *GroupRequest) (*ListOfGroups, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupInfo not implemented")
}
func (UnimplementedNetAuth2Server) GroupUM(context.Context, *KVRequest) (*ListOfStrings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupUM not implemented")
}
func (UnimplementedNetAuth2Server) GroupKVAdd(context.Context, *KV2Request) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupKVAdd not implemented")
}
func (UnimplementedNetAuth2Server) GroupKVGet(context.Context, *KV2Request) (*ListOfKVData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupKVGet not implemented")
}
func (UnimplementedNetAuth2Server) GroupKVDel(context.Context, *KV2Request) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupKVDel not implemented")
}
func (UnimplementedNetAuth2Server) GroupKVReplace(context.Context, *KV2Request) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupKVReplace not implemented")
}
func (UnimplementedNetAuth2Server) GroupUpdateRules(context.Context, *GroupRulesRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupUpdateRules not implemented")
}
func (UnimplementedNetAuth2Server) GroupAddMember(context.Context, *EntityRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupAddMember not implemented")
}
func (UnimplementedNetAuth2Server) GroupDelMember(context.Context, *EntityRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupDelMember not implemented")
}
func (UnimplementedNetAuth2Server) GroupDestroy(context.Context, *GroupRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupDestroy not implemented")
}
func (UnimplementedNetAuth2Server) GroupMembers(context.Context, *GroupRequest) (*ListOfEntities, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupMembers not implemented")
}
func (UnimplementedNetAuth2Server) GroupSearch(context.Context, *SearchRequest) (*ListOfGroups, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupSearch not implemented")
}
func (UnimplementedNetAuth2Server) SystemCapabilities(context.Context, *CapabilityRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemCapabilities not implemented")
}
func (UnimplementedNetAuth2Server) SystemPing(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemPing not implemented")
}
func (UnimplementedNetAuth2Server) SystemStatus(context.Context, *Empty) (*ServerStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemStatus not implemented")
}

// UnsafeNetAuth2Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NetAuth2Server will
// result in compilation errors.
type UnsafeNetAuth2Server interface {
	mustEmbedUnimplementedNetAuth2Server()
}

func RegisterNetAuth2Server(s grpc.ServiceRegistrar, srv NetAuth2Server) {
	s.RegisterService(&NetAuth2_ServiceDesc, srv)
}

func _NetAuth2_EntityCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAuth2Server).EntityCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netauth.v2.NetAuth2/EntityCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAuth2Server).EntityCreate(ctx, req.(*EntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetAuth2_EntityUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAuth2Server).EntityUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netauth.v2.NetAuth2/EntityUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAuth2Server).EntityUpdate(ctx, req.(*EntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetAuth2_EntityInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAuth2Server).EntityInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netauth.v2.NetAuth2/EntityInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAuth2Server).EntityInfo(ctx, req.(*EntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetAuth2_EntitySearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAuth2Server).EntitySearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netauth.v2.NetAuth2/EntitySearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAuth2Server).EntitySearch(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetAuth2_EntityUM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KVRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAuth2Server).EntityUM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netauth.v2.NetAuth2/EntityUM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAuth2Server).EntityUM(ctx, req.(*KVRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetAuth2_EntityKVAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAuth2Server).EntityKVAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netauth.v2.NetAuth2/EntityKVAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAuth2Server).EntityKVAdd(ctx, req.(*KV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetAuth2_EntityKVGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAuth2Server).EntityKVGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netauth.v2.NetAuth2/EntityKVGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAuth2Server).EntityKVGet(ctx, req.(*KV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetAuth2_EntityKVDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAuth2Server).EntityKVDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netauth.v2.NetAuth2/EntityKVDel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAuth2Server).EntityKVDel(ctx, req.(*KV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetAuth2_EntityKVReplace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAuth2Server).EntityKVReplace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netauth.v2.NetAuth2/EntityKVReplace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAuth2Server).EntityKVReplace(ctx, req.(*KV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetAuth2_EntityKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KVRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAuth2Server).EntityKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netauth.v2.NetAuth2/EntityKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAuth2Server).EntityKeys(ctx, req.(*KVRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetAuth2_EntityDestroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAuth2Server).EntityDestroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netauth.v2.NetAuth2/EntityDestroy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAuth2Server).EntityDestroy(ctx, req.(*EntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetAuth2_EntityLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAuth2Server).EntityLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netauth.v2.NetAuth2/EntityLock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAuth2Server).EntityLock(ctx, req.(*EntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetAuth2_EntityUnlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAuth2Server).EntityUnlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netauth.v2.NetAuth2/EntityUnlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAuth2Server).EntityUnlock(ctx, req.(*EntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetAuth2_EntityGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAuth2Server).EntityGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netauth.v2.NetAuth2/EntityGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAuth2Server).EntityGroups(ctx, req.(*EntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetAuth2_AuthEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAuth2Server).AuthEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netauth.v2.NetAuth2/AuthEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAuth2Server).AuthEntity(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetAuth2_AuthGetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAuth2Server).AuthGetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netauth.v2.NetAuth2/AuthGetToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAuth2Server).AuthGetToken(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetAuth2_AuthValidateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAuth2Server).AuthValidateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netauth.v2.NetAuth2/AuthValidateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAuth2Server).AuthValidateToken(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetAuth2_AuthChangeSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAuth2Server).AuthChangeSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netauth.v2.NetAuth2/AuthChangeSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAuth2Server).AuthChangeSecret(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetAuth2_GroupCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAuth2Server).GroupCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netauth.v2.NetAuth2/GroupCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAuth2Server).GroupCreate(ctx, req.(*GroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetAuth2_GroupUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAuth2Server).GroupUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netauth.v2.NetAuth2/GroupUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAuth2Server).GroupUpdate(ctx, req.(*GroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetAuth2_GroupInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAuth2Server).GroupInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netauth.v2.NetAuth2/GroupInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAuth2Server).GroupInfo(ctx, req.(*GroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetAuth2_GroupUM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KVRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAuth2Server).GroupUM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netauth.v2.NetAuth2/GroupUM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAuth2Server).GroupUM(ctx, req.(*KVRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetAuth2_GroupKVAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAuth2Server).GroupKVAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netauth.v2.NetAuth2/GroupKVAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAuth2Server).GroupKVAdd(ctx, req.(*KV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetAuth2_GroupKVGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAuth2Server).GroupKVGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netauth.v2.NetAuth2/GroupKVGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAuth2Server).GroupKVGet(ctx, req.(*KV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetAuth2_GroupKVDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAuth2Server).GroupKVDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netauth.v2.NetAuth2/GroupKVDel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAuth2Server).GroupKVDel(ctx, req.(*KV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetAuth2_GroupKVReplace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAuth2Server).GroupKVReplace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netauth.v2.NetAuth2/GroupKVReplace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAuth2Server).GroupKVReplace(ctx, req.(*KV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetAuth2_GroupUpdateRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupRulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAuth2Server).GroupUpdateRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netauth.v2.NetAuth2/GroupUpdateRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAuth2Server).GroupUpdateRules(ctx, req.(*GroupRulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetAuth2_GroupAddMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAuth2Server).GroupAddMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netauth.v2.NetAuth2/GroupAddMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAuth2Server).GroupAddMember(ctx, req.(*EntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetAuth2_GroupDelMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAuth2Server).GroupDelMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netauth.v2.NetAuth2/GroupDelMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAuth2Server).GroupDelMember(ctx, req.(*EntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetAuth2_GroupDestroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAuth2Server).GroupDestroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netauth.v2.NetAuth2/GroupDestroy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAuth2Server).GroupDestroy(ctx, req.(*GroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetAuth2_GroupMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAuth2Server).GroupMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netauth.v2.NetAuth2/GroupMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAuth2Server).GroupMembers(ctx, req.(*GroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetAuth2_GroupSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAuth2Server).GroupSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netauth.v2.NetAuth2/GroupSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAuth2Server).GroupSearch(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetAuth2_SystemCapabilities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CapabilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAuth2Server).SystemCapabilities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netauth.v2.NetAuth2/SystemCapabilities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAuth2Server).SystemCapabilities(ctx, req.(*CapabilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetAuth2_SystemPing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAuth2Server).SystemPing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netauth.v2.NetAuth2/SystemPing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAuth2Server).SystemPing(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetAuth2_SystemStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAuth2Server).SystemStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netauth.v2.NetAuth2/SystemStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAuth2Server).SystemStatus(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// NetAuth2_ServiceDesc is the grpc.ServiceDesc for NetAuth2 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NetAuth2_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "netauth.v2.NetAuth2",
	HandlerType: (*NetAuth2Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EntityCreate",
			Handler:    _NetAuth2_EntityCreate_Handler,
		},
		{
			MethodName: "EntityUpdate",
			Handler:    _NetAuth2_EntityUpdate_Handler,
		},
		{
			MethodName: "EntityInfo",
			Handler:    _NetAuth2_EntityInfo_Handler,
		},
		{
			MethodName: "EntitySearch",
			Handler:    _NetAuth2_EntitySearch_Handler,
		},
		{
			MethodName: "EntityUM",
			Handler:    _NetAuth2_EntityUM_Handler,
		},
		{
			MethodName: "EntityKVAdd",
			Handler:    _NetAuth2_EntityKVAdd_Handler,
		},
		{
			MethodName: "EntityKVGet",
			Handler:    _NetAuth2_EntityKVGet_Handler,
		},
		{
			MethodName: "EntityKVDel",
			Handler:    _NetAuth2_EntityKVDel_Handler,
		},
		{
			MethodName: "EntityKVReplace",
			Handler:    _NetAuth2_EntityKVReplace_Handler,
		},
		{
			MethodName: "EntityKeys",
			Handler:    _NetAuth2_EntityKeys_Handler,
		},
		{
			MethodName: "EntityDestroy",
			Handler:    _NetAuth2_EntityDestroy_Handler,
		},
		{
			MethodName: "EntityLock",
			Handler:    _NetAuth2_EntityLock_Handler,
		},
		{
			MethodName: "EntityUnlock",
			Handler:    _NetAuth2_EntityUnlock_Handler,
		},
		{
			MethodName: "EntityGroups",
			Handler:    _NetAuth2_EntityGroups_Handler,
		},
		{
			MethodName: "AuthEntity",
			Handler:    _NetAuth2_AuthEntity_Handler,
		},
		{
			MethodName: "AuthGetToken",
			Handler:    _NetAuth2_AuthGetToken_Handler,
		},
		{
			MethodName: "AuthValidateToken",
			Handler:    _NetAuth2_AuthValidateToken_Handler,
		},
		{
			MethodName: "AuthChangeSecret",
			Handler:    _NetAuth2_AuthChangeSecret_Handler,
		},
		{
			MethodName: "GroupCreate",
			Handler:    _NetAuth2_GroupCreate_Handler,
		},
		{
			MethodName: "GroupUpdate",
			Handler:    _NetAuth2_GroupUpdate_Handler,
		},
		{
			MethodName: "GroupInfo",
			Handler:    _NetAuth2_GroupInfo_Handler,
		},
		{
			MethodName: "GroupUM",
			Handler:    _NetAuth2_GroupUM_Handler,
		},
		{
			MethodName: "GroupKVAdd",
			Handler:    _NetAuth2_GroupKVAdd_Handler,
		},
		{
			MethodName: "GroupKVGet",
			Handler:    _NetAuth2_GroupKVGet_Handler,
		},
		{
			MethodName: "GroupKVDel",
			Handler:    _NetAuth2_GroupKVDel_Handler,
		},
		{
			MethodName: "GroupKVReplace",
			Handler:    _NetAuth2_GroupKVReplace_Handler,
		},
		{
			MethodName: "GroupUpdateRules",
			Handler:    _NetAuth2_GroupUpdateRules_Handler,
		},
		{
			MethodName: "GroupAddMember",
			Handler:    _NetAuth2_GroupAddMember_Handler,
		},
		{
			MethodName: "GroupDelMember",
			Handler:    _NetAuth2_GroupDelMember_Handler,
		},
		{
			MethodName: "GroupDestroy",
			Handler:    _NetAuth2_GroupDestroy_Handler,
		},
		{
			MethodName: "GroupMembers",
			Handler:    _NetAuth2_GroupMembers_Handler,
		},
		{
			MethodName: "GroupSearch",
			Handler:    _NetAuth2_GroupSearch_Handler,
		},
		{
			MethodName: "SystemCapabilities",
			Handler:    _NetAuth2_SystemCapabilities_Handler,
		},
		{
			MethodName: "SystemPing",
			Handler:    _NetAuth2_SystemPing_Handler,
		},
		{
			MethodName: "SystemStatus",
			Handler:    _NetAuth2_SystemStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v2/rpc.proto",
}
