// This is the v2 transport protocol for NetAuth.  It encompases the
// lessons learned from v1, mainly that naming functions matters, and
// its very important to maintain conventions throughout an interface.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: v2/rpc.proto

package v2

import (
	protocol "github.com/netauth/protocol"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Action int32

const (
	Action_ADD        Action = 1
	Action_DROP       Action = 2
	Action_UPSERT     Action = 3
	Action_CLEAREXACT Action = 4
	Action_CLEARFUZZY Action = 5
	Action_READ       Action = 6
)

// Enum value maps for Action.
var (
	Action_name = map[int32]string{
		1: "ADD",
		2: "DROP",
		3: "UPSERT",
		4: "CLEAREXACT",
		5: "CLEARFUZZY",
		6: "READ",
	}
	Action_value = map[string]int32{
		"ADD":        1,
		"DROP":       2,
		"UPSERT":     3,
		"CLEAREXACT": 4,
		"CLEARFUZZY": 5,
		"READ":       6,
	}
)

func (x Action) Enum() *Action {
	p := new(Action)
	*p = x
	return p
}

func (x Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Action) Descriptor() protoreflect.EnumDescriptor {
	return file_v2_rpc_proto_enumTypes[0].Descriptor()
}

func (Action) Type() protoreflect.EnumType {
	return &file_v2_rpc_proto_enumTypes[0]
}

func (x Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Action) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Action(num)
	return nil
}

// Deprecated: Use Action.Descriptor instead.
func (Action) EnumDescriptor() ([]byte, []int) {
	return file_v2_rpc_proto_rawDescGZIP(), []int{0}
}

type RuleAction int32

const (
	RuleAction_INCLUDE     RuleAction = 1
	RuleAction_EXCLUDE     RuleAction = 2
	RuleAction_REMOVE_RULE RuleAction = 99
)

// Enum value maps for RuleAction.
var (
	RuleAction_name = map[int32]string{
		1:  "INCLUDE",
		2:  "EXCLUDE",
		99: "REMOVE_RULE",
	}
	RuleAction_value = map[string]int32{
		"INCLUDE":     1,
		"EXCLUDE":     2,
		"REMOVE_RULE": 99,
	}
)

func (x RuleAction) Enum() *RuleAction {
	p := new(RuleAction)
	*p = x
	return p
}

func (x RuleAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RuleAction) Descriptor() protoreflect.EnumDescriptor {
	return file_v2_rpc_proto_enumTypes[1].Descriptor()
}

func (RuleAction) Type() protoreflect.EnumType {
	return &file_v2_rpc_proto_enumTypes[1]
}

func (x RuleAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *RuleAction) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = RuleAction(num)
	return nil
}

// Deprecated: Use RuleAction.Descriptor instead.
func (RuleAction) EnumDescriptor() ([]byte, []int) {
	return file_v2_rpc_proto_rawDescGZIP(), []int{1}
}

type EntityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entity *protocol.Entity `protobuf:"bytes,1,opt,name=Entity" json:"Entity,omitempty"`
	Data   *protocol.Entity `protobuf:"bytes,2,opt,name=Data" json:"Data,omitempty"`
}

func (x *EntityRequest) Reset() {
	*x = EntityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v2_rpc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityRequest) ProtoMessage() {}

func (x *EntityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v2_rpc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityRequest.ProtoReflect.Descriptor instead.
func (*EntityRequest) Descriptor() ([]byte, []int) {
	return file_v2_rpc_proto_rawDescGZIP(), []int{0}
}

func (x *EntityRequest) GetEntity() *protocol.Entity {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *EntityRequest) GetData() *protocol.Entity {
	if x != nil {
		return x.Data
	}
	return nil
}

type GroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group *protocol.Group `protobuf:"bytes,1,opt,name=Group" json:"Group,omitempty"`
	Data  *protocol.Group `protobuf:"bytes,2,opt,name=Data" json:"Data,omitempty"`
}

func (x *GroupRequest) Reset() {
	*x = GroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v2_rpc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupRequest) ProtoMessage() {}

func (x *GroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v2_rpc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupRequest.ProtoReflect.Descriptor instead.
func (*GroupRequest) Descriptor() ([]byte, []int) {
	return file_v2_rpc_proto_rawDescGZIP(), []int{1}
}

func (x *GroupRequest) GetGroup() *protocol.Group {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *GroupRequest) GetData() *protocol.Group {
	if x != nil {
		return x.Data
	}
	return nil
}

type KVRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target *string `protobuf:"bytes,1,opt,name=Target" json:"Target,omitempty"`
	Action *Action `protobuf:"varint,2,opt,name=Action,enum=netauth.v2.Action" json:"Action,omitempty"`
	Key    *string `protobuf:"bytes,3,opt,name=Key" json:"Key,omitempty"`
	Value  *string `protobuf:"bytes,4,opt,name=Value" json:"Value,omitempty"`
}

func (x *KVRequest) Reset() {
	*x = KVRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v2_rpc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KVRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KVRequest) ProtoMessage() {}

func (x *KVRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v2_rpc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KVRequest.ProtoReflect.Descriptor instead.
func (*KVRequest) Descriptor() ([]byte, []int) {
	return file_v2_rpc_proto_rawDescGZIP(), []int{2}
}

func (x *KVRequest) GetTarget() string {
	if x != nil && x.Target != nil {
		return *x.Target
	}
	return ""
}

func (x *KVRequest) GetAction() Action {
	if x != nil && x.Action != nil {
		return *x.Action
	}
	return Action_ADD
}

func (x *KVRequest) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *KVRequest) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type KV2Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target *string          `protobuf:"bytes,1,opt,name=Target" json:"Target,omitempty"`
	Data   *protocol.KVData `protobuf:"bytes,2,opt,name=Data" json:"Data,omitempty"`
}

func (x *KV2Request) Reset() {
	*x = KV2Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v2_rpc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KV2Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KV2Request) ProtoMessage() {}

func (x *KV2Request) ProtoReflect() protoreflect.Message {
	mi := &file_v2_rpc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KV2Request.ProtoReflect.Descriptor instead.
func (*KV2Request) Descriptor() ([]byte, []int) {
	return file_v2_rpc_proto_rawDescGZIP(), []int{3}
}

func (x *KV2Request) GetTarget() string {
	if x != nil && x.Target != nil {
		return *x.Target
	}
	return ""
}

func (x *KV2Request) GetData() *protocol.KVData {
	if x != nil {
		return x.Data
	}
	return nil
}

type ListOfEntities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entities []*protocol.Entity `protobuf:"bytes,1,rep,name=Entities" json:"Entities,omitempty"`
}

func (x *ListOfEntities) Reset() {
	*x = ListOfEntities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v2_rpc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOfEntities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOfEntities) ProtoMessage() {}

func (x *ListOfEntities) ProtoReflect() protoreflect.Message {
	mi := &file_v2_rpc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOfEntities.ProtoReflect.Descriptor instead.
func (*ListOfEntities) Descriptor() ([]byte, []int) {
	return file_v2_rpc_proto_rawDescGZIP(), []int{4}
}

func (x *ListOfEntities) GetEntities() []*protocol.Entity {
	if x != nil {
		return x.Entities
	}
	return nil
}

type ListOfGroups struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Groups []*protocol.Group `protobuf:"bytes,1,rep,name=Groups" json:"Groups,omitempty"`
}

func (x *ListOfGroups) Reset() {
	*x = ListOfGroups{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v2_rpc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOfGroups) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOfGroups) ProtoMessage() {}

func (x *ListOfGroups) ProtoReflect() protoreflect.Message {
	mi := &file_v2_rpc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOfGroups.ProtoReflect.Descriptor instead.
func (*ListOfGroups) Descriptor() ([]byte, []int) {
	return file_v2_rpc_proto_rawDescGZIP(), []int{5}
}

func (x *ListOfGroups) GetGroups() []*protocol.Group {
	if x != nil {
		return x.Groups
	}
	return nil
}

type ListOfStrings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Strings []string `protobuf:"bytes,1,rep,name=Strings" json:"Strings,omitempty"`
}

func (x *ListOfStrings) Reset() {
	*x = ListOfStrings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v2_rpc_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOfStrings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOfStrings) ProtoMessage() {}

func (x *ListOfStrings) ProtoReflect() protoreflect.Message {
	mi := &file_v2_rpc_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOfStrings.ProtoReflect.Descriptor instead.
func (*ListOfStrings) Descriptor() ([]byte, []int) {
	return file_v2_rpc_proto_rawDescGZIP(), []int{6}
}

func (x *ListOfStrings) GetStrings() []string {
	if x != nil {
		return x.Strings
	}
	return nil
}

type ListOfKVData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KVData []*protocol.KVData `protobuf:"bytes,1,rep,name=KVData" json:"KVData,omitempty"`
}

func (x *ListOfKVData) Reset() {
	*x = ListOfKVData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v2_rpc_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOfKVData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOfKVData) ProtoMessage() {}

func (x *ListOfKVData) ProtoReflect() protoreflect.Message {
	mi := &file_v2_rpc_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOfKVData.ProtoReflect.Descriptor instead.
func (*ListOfKVData) Descriptor() ([]byte, []int) {
	return file_v2_rpc_proto_rawDescGZIP(), []int{7}
}

func (x *ListOfKVData) GetKVData() []*protocol.KVData {
	if x != nil {
		return x.KVData
	}
	return nil
}

type AuthRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entity *protocol.Entity `protobuf:"bytes,1,opt,name=Entity" json:"Entity,omitempty"`
	Secret *string          `protobuf:"bytes,2,opt,name=Secret" json:"Secret,omitempty"`
	Token  *string          `protobuf:"bytes,98,opt,name=Token" json:"Token,omitempty"`
}

func (x *AuthRequest) Reset() {
	*x = AuthRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v2_rpc_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthRequest) ProtoMessage() {}

func (x *AuthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v2_rpc_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthRequest.ProtoReflect.Descriptor instead.
func (*AuthRequest) Descriptor() ([]byte, []int) {
	return file_v2_rpc_proto_rawDescGZIP(), []int{8}
}

func (x *AuthRequest) GetEntity() *protocol.Entity {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *AuthRequest) GetSecret() string {
	if x != nil && x.Secret != nil {
		return *x.Secret
	}
	return ""
}

func (x *AuthRequest) GetToken() string {
	if x != nil && x.Token != nil {
		return *x.Token
	}
	return ""
}

type AuthResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token *string `protobuf:"bytes,1,opt,name=Token" json:"Token,omitempty"`
}

func (x *AuthResult) Reset() {
	*x = AuthResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v2_rpc_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthResult) ProtoMessage() {}

func (x *AuthResult) ProtoReflect() protoreflect.Message {
	mi := &file_v2_rpc_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthResult.ProtoReflect.Descriptor instead.
func (*AuthResult) Descriptor() ([]byte, []int) {
	return file_v2_rpc_proto_rawDescGZIP(), []int{9}
}

func (x *AuthResult) GetToken() string {
	if x != nil && x.Token != nil {
		return *x.Token
	}
	return ""
}

type SubSystemStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         *string `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	OK           *bool   `protobuf:"varint,2,opt,name=OK" json:"OK,omitempty"`
	FaultMessage *string `protobuf:"bytes,3,opt,name=FaultMessage" json:"FaultMessage,omitempty"`
}

func (x *SubSystemStatus) Reset() {
	*x = SubSystemStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v2_rpc_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubSystemStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubSystemStatus) ProtoMessage() {}

func (x *SubSystemStatus) ProtoReflect() protoreflect.Message {
	mi := &file_v2_rpc_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubSystemStatus.ProtoReflect.Descriptor instead.
func (*SubSystemStatus) Descriptor() ([]byte, []int) {
	return file_v2_rpc_proto_rawDescGZIP(), []int{10}
}

func (x *SubSystemStatus) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *SubSystemStatus) GetOK() bool {
	if x != nil && x.OK != nil {
		return *x.OK
	}
	return false
}

func (x *SubSystemStatus) GetFaultMessage() string {
	if x != nil && x.FaultMessage != nil {
		return *x.FaultMessage
	}
	return ""
}

type ServerStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SystemOK     *bool              `protobuf:"varint,1,opt,name=SystemOK" json:"SystemOK,omitempty"`
	FirstFailure *SubSystemStatus   `protobuf:"bytes,2,opt,name=FirstFailure" json:"FirstFailure,omitempty"`
	SubSystems   []*SubSystemStatus `protobuf:"bytes,3,rep,name=SubSystems" json:"SubSystems,omitempty"`
}

func (x *ServerStatus) Reset() {
	*x = ServerStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v2_rpc_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerStatus) ProtoMessage() {}

func (x *ServerStatus) ProtoReflect() protoreflect.Message {
	mi := &file_v2_rpc_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerStatus.ProtoReflect.Descriptor instead.
func (*ServerStatus) Descriptor() ([]byte, []int) {
	return file_v2_rpc_proto_rawDescGZIP(), []int{11}
}

func (x *ServerStatus) GetSystemOK() bool {
	if x != nil && x.SystemOK != nil {
		return *x.SystemOK
	}
	return false
}

func (x *ServerStatus) GetFirstFailure() *SubSystemStatus {
	if x != nil {
		return x.FirstFailure
	}
	return nil
}

func (x *ServerStatus) GetSubSystems() []*SubSystemStatus {
	if x != nil {
		return x.SubSystems
	}
	return nil
}

type CapabilityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Capability *protocol.Capability `protobuf:"varint,1,opt,name=Capability,enum=Capability" json:"Capability,omitempty"`
	Direct     *bool                `protobuf:"varint,2,opt,name=Direct" json:"Direct,omitempty"`
	Target     *string              `protobuf:"bytes,3,opt,name=Target" json:"Target,omitempty"`
	Action     *Action              `protobuf:"varint,4,opt,name=Action,enum=netauth.v2.Action" json:"Action,omitempty"`
}

func (x *CapabilityRequest) Reset() {
	*x = CapabilityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v2_rpc_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CapabilityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CapabilityRequest) ProtoMessage() {}

func (x *CapabilityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v2_rpc_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CapabilityRequest.ProtoReflect.Descriptor instead.
func (*CapabilityRequest) Descriptor() ([]byte, []int) {
	return file_v2_rpc_proto_rawDescGZIP(), []int{12}
}

func (x *CapabilityRequest) GetCapability() protocol.Capability {
	if x != nil && x.Capability != nil {
		return *x.Capability
	}
	return protocol.Capability(0)
}

func (x *CapabilityRequest) GetDirect() bool {
	if x != nil && x.Direct != nil {
		return *x.Direct
	}
	return false
}

func (x *CapabilityRequest) GetTarget() string {
	if x != nil && x.Target != nil {
		return *x.Target
	}
	return ""
}

func (x *CapabilityRequest) GetAction() Action {
	if x != nil && x.Action != nil {
		return *x.Action
	}
	return Action_ADD
}

type GroupRulesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group      *protocol.Group `protobuf:"bytes,1,opt,name=Group" json:"Group,omitempty"`
	Target     *protocol.Group `protobuf:"bytes,2,opt,name=Target" json:"Target,omitempty"`
	RuleAction *RuleAction     `protobuf:"varint,3,opt,name=RuleAction,enum=netauth.v2.RuleAction" json:"RuleAction,omitempty"`
}

func (x *GroupRulesRequest) Reset() {
	*x = GroupRulesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v2_rpc_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupRulesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupRulesRequest) ProtoMessage() {}

func (x *GroupRulesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v2_rpc_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupRulesRequest.ProtoReflect.Descriptor instead.
func (*GroupRulesRequest) Descriptor() ([]byte, []int) {
	return file_v2_rpc_proto_rawDescGZIP(), []int{13}
}

func (x *GroupRulesRequest) GetGroup() *protocol.Group {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *GroupRulesRequest) GetTarget() *protocol.Group {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *GroupRulesRequest) GetRuleAction() RuleAction {
	if x != nil && x.RuleAction != nil {
		return *x.RuleAction
	}
	return RuleAction_INCLUDE
}

// Some RPC commands return no result, instead the only return
// information required is the status code which is returned in a
// parallel channel via gRPC magic.  This message serves that function
// by being explicitly empty.
type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v2_rpc_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_v2_rpc_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_v2_rpc_proto_rawDescGZIP(), []int{14}
}

// A SearchRequest contains a search expression, and the standard
// client info struct.
type SearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expression *string `protobuf:"bytes,1,opt,name=expression" json:"expression,omitempty"`
}

func (x *SearchRequest) Reset() {
	*x = SearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v2_rpc_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRequest) ProtoMessage() {}

func (x *SearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v2_rpc_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRequest.ProtoReflect.Descriptor instead.
func (*SearchRequest) Descriptor() ([]byte, []int) {
	return file_v2_rpc_proto_rawDescGZIP(), []int{15}
}

func (x *SearchRequest) GetExpression() string {
	if x != nil && x.Expression != nil {
		return *x.Expression
	}
	return ""
}

var File_v2_rpc_proto protoreflect.FileDescriptor

var file_v2_rpc_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x76, 0x32, 0x2f, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a,
	0x6e, 0x65, 0x74, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x32, 0x1a, 0x0d, 0x6e, 0x65, 0x74, 0x61,
	0x75, 0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4d, 0x0a, 0x0d, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x06, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x52, 0x06, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1b, 0x0a, 0x04, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x48, 0x0a, 0x0c, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1a, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x04, 0x44, 0x61,
	0x74, 0x61, 0x22, 0x77, 0x0a, 0x09, 0x4b, 0x56, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x2a, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6e, 0x65, 0x74, 0x61, 0x75, 0x74,
	0x68, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x41, 0x0a, 0x0a, 0x4b,
	0x56, 0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x12, 0x1b, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x07, 0x2e, 0x4b, 0x56, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x35,
	0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x66, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x12, 0x23, 0x0a, 0x08, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x07, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x22, 0x2e, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x66, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x1e, 0x0a, 0x06, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x06, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0x29, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x66, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73,
	0x22, 0x2f, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x66, 0x4b, 0x56, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x1f, 0x0a, 0x06, 0x4b, 0x56, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x07, 0x2e, 0x4b, 0x56, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x4b, 0x56, 0x44, 0x61, 0x74,
	0x61, 0x22, 0x5c, 0x0a, 0x0b, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1f, 0x0a, 0x06, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x07, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x06, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x62, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0x22, 0x0a, 0x0a, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0x59, 0x0a, 0x0f, 0x53, 0x75, 0x62, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x4f, 0x4b,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x4f, 0x4b, 0x12, 0x22, 0x0a, 0x0c, 0x46, 0x61,
	0x75, 0x6c, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xa8,
	0x01, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4f, 0x4b, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4f, 0x4b, 0x12, 0x3f, 0x0a, 0x0c, 0x46,
	0x69, 0x72, 0x73, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x6e, 0x65, 0x74, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x32, 0x2e, 0x53,
	0x75, 0x62, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c,
	0x46, 0x69, 0x72, 0x73, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x3b, 0x0a, 0x0a,
	0x53, 0x75, 0x62, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x6e, 0x65, 0x74, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x75,
	0x62, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x53,
	0x75, 0x62, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x9c, 0x01, 0x0a, 0x11, 0x43, 0x61,
	0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2b, 0x0a, 0x0a, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x52, 0x0a, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x2a, 0x0a, 0x06,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6e,
	0x65, 0x74, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x89, 0x01, 0x0a, 0x11, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c,
	0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1e, 0x0a, 0x06,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x06, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x36, 0x0a, 0x0a,
	0x52, 0x75, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x6e, 0x65, 0x74, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x75,
	0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x52, 0x75, 0x6c, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x2f, 0x0a,
	0x0d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2a, 0x51,
	0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x44, 0x44, 0x10,
	0x01, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x52, 0x4f, 0x50, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x55,
	0x50, 0x53, 0x45, 0x52, 0x54, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4c, 0x45, 0x41, 0x52,
	0x45, 0x58, 0x41, 0x43, 0x54, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4c, 0x45, 0x41, 0x52,
	0x46, 0x55, 0x5a, 0x5a, 0x59, 0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x45, 0x41, 0x44, 0x10,
	0x06, 0x2a, 0x37, 0x0a, 0x0a, 0x52, 0x75, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x43, 0x4c, 0x55, 0x44, 0x45, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07,
	0x45, 0x58, 0x43, 0x4c, 0x55, 0x44, 0x45, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x4d,
	0x4f, 0x56, 0x45, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x10, 0x63, 0x32, 0xee, 0x11, 0x0a, 0x08, 0x4e,
	0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x32, 0x12, 0x3e, 0x0a, 0x0c, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x19, 0x2e, 0x6e, 0x65, 0x74, 0x61, 0x75, 0x74,
	0x68, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x11, 0x2e, 0x6e, 0x65, 0x74, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x32, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x0c, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x19, 0x2e, 0x6e, 0x65, 0x74, 0x61, 0x75, 0x74,
	0x68, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x11, 0x2e, 0x6e, 0x65, 0x74, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x32, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x0a, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x2e, 0x6e, 0x65, 0x74, 0x61, 0x75, 0x74, 0x68, 0x2e,
	0x76, 0x32, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1a, 0x2e, 0x6e, 0x65, 0x74, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x4f, 0x66, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x22, 0x00, 0x12, 0x47,
	0x0a, 0x0c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x19,
	0x2e, 0x6e, 0x65, 0x74, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x6e, 0x65, 0x74, 0x61,
	0x75, 0x74, 0x68, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x66, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x08, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x55, 0x4d, 0x12, 0x15, 0x2e, 0x6e, 0x65, 0x74, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x32,
	0x2e, 0x4b, 0x56, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x6e, 0x65, 0x74,
	0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x66, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x0b, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x4b, 0x56, 0x41, 0x64, 0x64, 0x12, 0x16, 0x2e, 0x6e, 0x65, 0x74, 0x61, 0x75, 0x74, 0x68,
	0x2e, 0x76, 0x32, 0x2e, 0x4b, 0x56, 0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11,
	0x2e, 0x6e, 0x65, 0x74, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x0b, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4b, 0x56, 0x47,
	0x65, 0x74, 0x12, 0x16, 0x2e, 0x6e, 0x65, 0x74, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x32, 0x2e,
	0x4b, 0x56, 0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x6e, 0x65, 0x74,
	0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x66, 0x4b, 0x56,
	0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x0b, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x4b, 0x56, 0x44, 0x65, 0x6c, 0x12, 0x16, 0x2e, 0x6e, 0x65, 0x74, 0x61, 0x75, 0x74, 0x68, 0x2e,
	0x76, 0x32, 0x2e, 0x4b, 0x56, 0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e,
	0x6e, 0x65, 0x74, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x3e, 0x0a, 0x0f, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4b, 0x56, 0x52, 0x65,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x16, 0x2e, 0x6e, 0x65, 0x74, 0x61, 0x75, 0x74, 0x68, 0x2e,
	0x76, 0x32, 0x2e, 0x4b, 0x56, 0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e,
	0x6e, 0x65, 0x74, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x40, 0x0a, 0x0a, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4b, 0x65, 0x79, 0x73,
	0x12, 0x15, 0x2e, 0x6e, 0x65, 0x74, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x32, 0x2e, 0x4b, 0x56,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x6e, 0x65, 0x74, 0x61, 0x75, 0x74,
	0x68, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x66, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x73, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x0d, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x65,
	0x73, 0x74, 0x72, 0x6f, 0x79, 0x12, 0x19, 0x2e, 0x6e, 0x65, 0x74, 0x61, 0x75, 0x74, 0x68, 0x2e,
	0x76, 0x32, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x11, 0x2e, 0x6e, 0x65, 0x74, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x0a, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c,
	0x6f, 0x63, 0x6b, 0x12, 0x19, 0x2e, 0x6e, 0x65, 0x74, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x32,
	0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11,
	0x2e, 0x6e, 0x65, 0x74, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x0c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x55, 0x6e, 0x6c,
	0x6f, 0x63, 0x6b, 0x12, 0x19, 0x2e, 0x6e, 0x65, 0x74, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x32,
	0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11,
	0x2e, 0x6e, 0x65, 0x74, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x0c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x12, 0x19, 0x2e, 0x6e, 0x65, 0x74, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x32,
	0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18,
	0x2e, 0x6e, 0x65, 0x74, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x4f, 0x66, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x0a, 0x41, 0x75,
	0x74, 0x68, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x17, 0x2e, 0x6e, 0x65, 0x74, 0x61, 0x75,
	0x74, 0x68, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x11, 0x2e, 0x6e, 0x65, 0x74, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x32, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x0c, 0x41, 0x75, 0x74, 0x68, 0x47, 0x65,
	0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x17, 0x2e, 0x6e, 0x65, 0x74, 0x61, 0x75, 0x74, 0x68,
	0x2e, 0x76, 0x32, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x6e, 0x65, 0x74, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x11, 0x41, 0x75, 0x74,
	0x68, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x17,
	0x2e, 0x6e, 0x65, 0x74, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x75, 0x74, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x6e, 0x65, 0x74, 0x61, 0x75, 0x74,
	0x68, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x10,
	0x41, 0x75, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x12, 0x17, 0x2e, 0x6e, 0x65, 0x74, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x75,
	0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x6e, 0x65, 0x74, 0x61,
	0x75, 0x74, 0x68, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3c,
	0x0a, 0x0b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x18, 0x2e,
	0x6e, 0x65, 0x74, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x6e, 0x65, 0x74, 0x61, 0x75, 0x74,
	0x68, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x0b,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x18, 0x2e, 0x6e, 0x65,
	0x74, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x6e, 0x65, 0x74, 0x61, 0x75, 0x74, 0x68, 0x2e,
	0x76, 0x32, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x09, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x2e, 0x6e, 0x65, 0x74, 0x61, 0x75, 0x74,
	0x68, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x18, 0x2e, 0x6e, 0x65, 0x74, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x32, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x4f, 0x66, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0x00, 0x12, 0x3d, 0x0a,
	0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x4d, 0x12, 0x15, 0x2e, 0x6e, 0x65, 0x74, 0x61, 0x75,
	0x74, 0x68, 0x2e, 0x76, 0x32, 0x2e, 0x4b, 0x56, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x19, 0x2e, 0x6e, 0x65, 0x74, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x4f, 0x66, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x0a,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4b, 0x56, 0x41, 0x64, 0x64, 0x12, 0x16, 0x2e, 0x6e, 0x65, 0x74,
	0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x32, 0x2e, 0x4b, 0x56, 0x32, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x11, 0x2e, 0x6e, 0x65, 0x74, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x32, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0a, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4b, 0x56, 0x47, 0x65, 0x74, 0x12, 0x16, 0x2e, 0x6e, 0x65, 0x74, 0x61, 0x75, 0x74, 0x68, 0x2e,
	0x76, 0x32, 0x2e, 0x4b, 0x56, 0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e,
	0x6e, 0x65, 0x74, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f,
	0x66, 0x4b, 0x56, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x0a, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4b, 0x56, 0x44, 0x65, 0x6c, 0x12, 0x16, 0x2e, 0x6e, 0x65, 0x74, 0x61, 0x75, 0x74,
	0x68, 0x2e, 0x76, 0x32, 0x2e, 0x4b, 0x56, 0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x11, 0x2e, 0x6e, 0x65, 0x74, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4b, 0x56, 0x52,
	0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x16, 0x2e, 0x6e, 0x65, 0x74, 0x61, 0x75, 0x74, 0x68,
	0x2e, 0x76, 0x32, 0x2e, 0x4b, 0x56, 0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11,
	0x2e, 0x6e, 0x65, 0x74, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x10, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x1d, 0x2e, 0x6e, 0x65, 0x74, 0x61, 0x75, 0x74,
	0x68, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x6e, 0x65, 0x74, 0x61, 0x75, 0x74, 0x68,
	0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x41, 0x64, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x19, 0x2e,
	0x6e, 0x65, 0x74, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x6e, 0x65, 0x74, 0x61, 0x75,
	0x74, 0x68, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x40, 0x0a,
	0x0e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x6c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x19, 0x2e, 0x6e, 0x65, 0x74, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x6e, 0x65, 0x74,
	0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x3d, 0x0a, 0x0c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x12,
	0x18, 0x2e, 0x6e, 0x65, 0x74, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x6e, 0x65, 0x74, 0x61,
	0x75, 0x74, 0x68, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x46,
	0x0a, 0x0c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x18,
	0x2e, 0x6e, 0x65, 0x74, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x6e, 0x65, 0x74, 0x61, 0x75,
	0x74, 0x68, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x66, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x0b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x19, 0x2e, 0x6e, 0x65, 0x74, 0x61, 0x75, 0x74, 0x68, 0x2e,
	0x76, 0x32, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x18, 0x2e, 0x6e, 0x65, 0x74, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x4f, 0x66, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x12,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x12, 0x1d, 0x2e, 0x6e, 0x65, 0x74, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x32, 0x2e,
	0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x11, 0x2e, 0x6e, 0x65, 0x74, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x32, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x0a, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x50, 0x69, 0x6e, 0x67, 0x12, 0x11, 0x2e, 0x6e, 0x65, 0x74, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76,
	0x32, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x11, 0x2e, 0x6e, 0x65, 0x74, 0x61, 0x75, 0x74,
	0x68, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0c,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x11, 0x2e, 0x6e,
	0x65, 0x74, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x18, 0x2e, 0x6e, 0x65, 0x74, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x42, 0x20, 0x5a, 0x1e, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6e, 0x65, 0x74, 0x61, 0x75, 0x74,
	0x68, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x76, 0x32,
}

var (
	file_v2_rpc_proto_rawDescOnce sync.Once
	file_v2_rpc_proto_rawDescData = file_v2_rpc_proto_rawDesc
)

func file_v2_rpc_proto_rawDescGZIP() []byte {
	file_v2_rpc_proto_rawDescOnce.Do(func() {
		file_v2_rpc_proto_rawDescData = protoimpl.X.CompressGZIP(file_v2_rpc_proto_rawDescData)
	})
	return file_v2_rpc_proto_rawDescData
}

var file_v2_rpc_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_v2_rpc_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_v2_rpc_proto_goTypes = []interface{}{
	(Action)(0),               // 0: netauth.v2.Action
	(RuleAction)(0),           // 1: netauth.v2.RuleAction
	(*EntityRequest)(nil),     // 2: netauth.v2.EntityRequest
	(*GroupRequest)(nil),      // 3: netauth.v2.GroupRequest
	(*KVRequest)(nil),         // 4: netauth.v2.KVRequest
	(*KV2Request)(nil),        // 5: netauth.v2.KV2Request
	(*ListOfEntities)(nil),    // 6: netauth.v2.ListOfEntities
	(*ListOfGroups)(nil),      // 7: netauth.v2.ListOfGroups
	(*ListOfStrings)(nil),     // 8: netauth.v2.ListOfStrings
	(*ListOfKVData)(nil),      // 9: netauth.v2.ListOfKVData
	(*AuthRequest)(nil),       // 10: netauth.v2.AuthRequest
	(*AuthResult)(nil),        // 11: netauth.v2.AuthResult
	(*SubSystemStatus)(nil),   // 12: netauth.v2.SubSystemStatus
	(*ServerStatus)(nil),      // 13: netauth.v2.ServerStatus
	(*CapabilityRequest)(nil), // 14: netauth.v2.CapabilityRequest
	(*GroupRulesRequest)(nil), // 15: netauth.v2.GroupRulesRequest
	(*Empty)(nil),             // 16: netauth.v2.Empty
	(*SearchRequest)(nil),     // 17: netauth.v2.SearchRequest
	(*protocol.Entity)(nil),   // 18: Entity
	(*protocol.Group)(nil),    // 19: Group
	(*protocol.KVData)(nil),   // 20: KVData
	(protocol.Capability)(0),  // 21: Capability
}
var file_v2_rpc_proto_depIdxs = []int32{
	18, // 0: netauth.v2.EntityRequest.Entity:type_name -> Entity
	18, // 1: netauth.v2.EntityRequest.Data:type_name -> Entity
	19, // 2: netauth.v2.GroupRequest.Group:type_name -> Group
	19, // 3: netauth.v2.GroupRequest.Data:type_name -> Group
	0,  // 4: netauth.v2.KVRequest.Action:type_name -> netauth.v2.Action
	20, // 5: netauth.v2.KV2Request.Data:type_name -> KVData
	18, // 6: netauth.v2.ListOfEntities.Entities:type_name -> Entity
	19, // 7: netauth.v2.ListOfGroups.Groups:type_name -> Group
	20, // 8: netauth.v2.ListOfKVData.KVData:type_name -> KVData
	18, // 9: netauth.v2.AuthRequest.Entity:type_name -> Entity
	12, // 10: netauth.v2.ServerStatus.FirstFailure:type_name -> netauth.v2.SubSystemStatus
	12, // 11: netauth.v2.ServerStatus.SubSystems:type_name -> netauth.v2.SubSystemStatus
	21, // 12: netauth.v2.CapabilityRequest.Capability:type_name -> Capability
	0,  // 13: netauth.v2.CapabilityRequest.Action:type_name -> netauth.v2.Action
	19, // 14: netauth.v2.GroupRulesRequest.Group:type_name -> Group
	19, // 15: netauth.v2.GroupRulesRequest.Target:type_name -> Group
	1,  // 16: netauth.v2.GroupRulesRequest.RuleAction:type_name -> netauth.v2.RuleAction
	2,  // 17: netauth.v2.NetAuth2.EntityCreate:input_type -> netauth.v2.EntityRequest
	2,  // 18: netauth.v2.NetAuth2.EntityUpdate:input_type -> netauth.v2.EntityRequest
	2,  // 19: netauth.v2.NetAuth2.EntityInfo:input_type -> netauth.v2.EntityRequest
	17, // 20: netauth.v2.NetAuth2.EntitySearch:input_type -> netauth.v2.SearchRequest
	4,  // 21: netauth.v2.NetAuth2.EntityUM:input_type -> netauth.v2.KVRequest
	5,  // 22: netauth.v2.NetAuth2.EntityKVAdd:input_type -> netauth.v2.KV2Request
	5,  // 23: netauth.v2.NetAuth2.EntityKVGet:input_type -> netauth.v2.KV2Request
	5,  // 24: netauth.v2.NetAuth2.EntityKVDel:input_type -> netauth.v2.KV2Request
	5,  // 25: netauth.v2.NetAuth2.EntityKVReplace:input_type -> netauth.v2.KV2Request
	4,  // 26: netauth.v2.NetAuth2.EntityKeys:input_type -> netauth.v2.KVRequest
	2,  // 27: netauth.v2.NetAuth2.EntityDestroy:input_type -> netauth.v2.EntityRequest
	2,  // 28: netauth.v2.NetAuth2.EntityLock:input_type -> netauth.v2.EntityRequest
	2,  // 29: netauth.v2.NetAuth2.EntityUnlock:input_type -> netauth.v2.EntityRequest
	2,  // 30: netauth.v2.NetAuth2.EntityGroups:input_type -> netauth.v2.EntityRequest
	10, // 31: netauth.v2.NetAuth2.AuthEntity:input_type -> netauth.v2.AuthRequest
	10, // 32: netauth.v2.NetAuth2.AuthGetToken:input_type -> netauth.v2.AuthRequest
	10, // 33: netauth.v2.NetAuth2.AuthValidateToken:input_type -> netauth.v2.AuthRequest
	10, // 34: netauth.v2.NetAuth2.AuthChangeSecret:input_type -> netauth.v2.AuthRequest
	3,  // 35: netauth.v2.NetAuth2.GroupCreate:input_type -> netauth.v2.GroupRequest
	3,  // 36: netauth.v2.NetAuth2.GroupUpdate:input_type -> netauth.v2.GroupRequest
	3,  // 37: netauth.v2.NetAuth2.GroupInfo:input_type -> netauth.v2.GroupRequest
	4,  // 38: netauth.v2.NetAuth2.GroupUM:input_type -> netauth.v2.KVRequest
	5,  // 39: netauth.v2.NetAuth2.GroupKVAdd:input_type -> netauth.v2.KV2Request
	5,  // 40: netauth.v2.NetAuth2.GroupKVGet:input_type -> netauth.v2.KV2Request
	5,  // 41: netauth.v2.NetAuth2.GroupKVDel:input_type -> netauth.v2.KV2Request
	5,  // 42: netauth.v2.NetAuth2.GroupKVReplace:input_type -> netauth.v2.KV2Request
	15, // 43: netauth.v2.NetAuth2.GroupUpdateRules:input_type -> netauth.v2.GroupRulesRequest
	2,  // 44: netauth.v2.NetAuth2.GroupAddMember:input_type -> netauth.v2.EntityRequest
	2,  // 45: netauth.v2.NetAuth2.GroupDelMember:input_type -> netauth.v2.EntityRequest
	3,  // 46: netauth.v2.NetAuth2.GroupDestroy:input_type -> netauth.v2.GroupRequest
	3,  // 47: netauth.v2.NetAuth2.GroupMembers:input_type -> netauth.v2.GroupRequest
	17, // 48: netauth.v2.NetAuth2.GroupSearch:input_type -> netauth.v2.SearchRequest
	14, // 49: netauth.v2.NetAuth2.SystemCapabilities:input_type -> netauth.v2.CapabilityRequest
	16, // 50: netauth.v2.NetAuth2.SystemPing:input_type -> netauth.v2.Empty
	16, // 51: netauth.v2.NetAuth2.SystemStatus:input_type -> netauth.v2.Empty
	16, // 52: netauth.v2.NetAuth2.EntityCreate:output_type -> netauth.v2.Empty
	16, // 53: netauth.v2.NetAuth2.EntityUpdate:output_type -> netauth.v2.Empty
	6,  // 54: netauth.v2.NetAuth2.EntityInfo:output_type -> netauth.v2.ListOfEntities
	6,  // 55: netauth.v2.NetAuth2.EntitySearch:output_type -> netauth.v2.ListOfEntities
	8,  // 56: netauth.v2.NetAuth2.EntityUM:output_type -> netauth.v2.ListOfStrings
	16, // 57: netauth.v2.NetAuth2.EntityKVAdd:output_type -> netauth.v2.Empty
	9,  // 58: netauth.v2.NetAuth2.EntityKVGet:output_type -> netauth.v2.ListOfKVData
	16, // 59: netauth.v2.NetAuth2.EntityKVDel:output_type -> netauth.v2.Empty
	16, // 60: netauth.v2.NetAuth2.EntityKVReplace:output_type -> netauth.v2.Empty
	8,  // 61: netauth.v2.NetAuth2.EntityKeys:output_type -> netauth.v2.ListOfStrings
	16, // 62: netauth.v2.NetAuth2.EntityDestroy:output_type -> netauth.v2.Empty
	16, // 63: netauth.v2.NetAuth2.EntityLock:output_type -> netauth.v2.Empty
	16, // 64: netauth.v2.NetAuth2.EntityUnlock:output_type -> netauth.v2.Empty
	7,  // 65: netauth.v2.NetAuth2.EntityGroups:output_type -> netauth.v2.ListOfGroups
	16, // 66: netauth.v2.NetAuth2.AuthEntity:output_type -> netauth.v2.Empty
	11, // 67: netauth.v2.NetAuth2.AuthGetToken:output_type -> netauth.v2.AuthResult
	16, // 68: netauth.v2.NetAuth2.AuthValidateToken:output_type -> netauth.v2.Empty
	16, // 69: netauth.v2.NetAuth2.AuthChangeSecret:output_type -> netauth.v2.Empty
	16, // 70: netauth.v2.NetAuth2.GroupCreate:output_type -> netauth.v2.Empty
	16, // 71: netauth.v2.NetAuth2.GroupUpdate:output_type -> netauth.v2.Empty
	7,  // 72: netauth.v2.NetAuth2.GroupInfo:output_type -> netauth.v2.ListOfGroups
	8,  // 73: netauth.v2.NetAuth2.GroupUM:output_type -> netauth.v2.ListOfStrings
	16, // 74: netauth.v2.NetAuth2.GroupKVAdd:output_type -> netauth.v2.Empty
	9,  // 75: netauth.v2.NetAuth2.GroupKVGet:output_type -> netauth.v2.ListOfKVData
	16, // 76: netauth.v2.NetAuth2.GroupKVDel:output_type -> netauth.v2.Empty
	16, // 77: netauth.v2.NetAuth2.GroupKVReplace:output_type -> netauth.v2.Empty
	16, // 78: netauth.v2.NetAuth2.GroupUpdateRules:output_type -> netauth.v2.Empty
	16, // 79: netauth.v2.NetAuth2.GroupAddMember:output_type -> netauth.v2.Empty
	16, // 80: netauth.v2.NetAuth2.GroupDelMember:output_type -> netauth.v2.Empty
	16, // 81: netauth.v2.NetAuth2.GroupDestroy:output_type -> netauth.v2.Empty
	6,  // 82: netauth.v2.NetAuth2.GroupMembers:output_type -> netauth.v2.ListOfEntities
	7,  // 83: netauth.v2.NetAuth2.GroupSearch:output_type -> netauth.v2.ListOfGroups
	16, // 84: netauth.v2.NetAuth2.SystemCapabilities:output_type -> netauth.v2.Empty
	16, // 85: netauth.v2.NetAuth2.SystemPing:output_type -> netauth.v2.Empty
	13, // 86: netauth.v2.NetAuth2.SystemStatus:output_type -> netauth.v2.ServerStatus
	52, // [52:87] is the sub-list for method output_type
	17, // [17:52] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_v2_rpc_proto_init() }
func file_v2_rpc_proto_init() {
	if File_v2_rpc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_v2_rpc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v2_rpc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v2_rpc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KVRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v2_rpc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KV2Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v2_rpc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOfEntities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v2_rpc_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOfGroups); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v2_rpc_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOfStrings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v2_rpc_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOfKVData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v2_rpc_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v2_rpc_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v2_rpc_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubSystemStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v2_rpc_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v2_rpc_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CapabilityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v2_rpc_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupRulesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v2_rpc_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v2_rpc_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_v2_rpc_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_v2_rpc_proto_goTypes,
		DependencyIndexes: file_v2_rpc_proto_depIdxs,
		EnumInfos:         file_v2_rpc_proto_enumTypes,
		MessageInfos:      file_v2_rpc_proto_msgTypes,
	}.Build()
	File_v2_rpc_proto = out.File
	file_v2_rpc_proto_rawDesc = nil
	file_v2_rpc_proto_goTypes = nil
	file_v2_rpc_proto_depIdxs = nil
}
